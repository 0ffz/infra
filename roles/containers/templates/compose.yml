version: '3'
services:
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      API_KEY: "{{ cloudflare_api_key }}"
      ZONE: "offz.me"
      SUBDOMAIN: "maple"
      PROXIED: "false"

  traefik:
    container_name: traefik
    image: "traefik:latest"
    networks:
      - traefik
    environment:
      CLOUDFLARE_EMAIL: "{{ cloudflare_email }}"
      CLOUDFLARE_DNS_API_TOKEN: "{{ cloudflare_api_key }}"
    command:
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker=true
      # Enable the Trafik dashboard
#      - --api.dashboard=true
      # Set up LetsEncrypt
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email={{ cloudflare_email }}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme_data/acme.json
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      # Set up the TLS configuration for our websecure listener
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=home.offz.me
      - --entrypoints.websecure.http.tls.domains[0].sans=*.home.offz.me
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme_data:/acme_data/"
    labels:
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
#      - "traefik.http.routers.traefik-secure"

  agent:
    networks:
      - traefik
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  portainer:
    image: portainer/portainer-ce
    networks:
      - traefik
    command: -H tcp://agent:9001 --tlsskipverify
    # ports:
    #   - "9000:9000"
    #   - "9443:9443"
    labels:
      # Frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`portainer.home.offz.me`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
#
#      # Edge
#      - "traefik.http.routers.edge.rule=Host(`edge.localhost`)"
#      - "traefik.http.routers.edge.entrypoints=websecure"
#      - "traefik.http.services.edge.loadbalancer.server.port=8000"
#      - "traefik.http.routers.edge.service=edge"
#      - "traefik.http.routers.edge.tls.certresolver=letsencrypt"
    volumes:
      - portainer_data:/data
  # whoami:
  #     # A container that exposes an API to show its IP address
  #     image: traefik/whoami
  #     labels:
  #       - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"

volumes:
  portainer_data:
  acme_data:

networks:
  traefik:
